// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolios Portfolio[]
  watchlists Watchlist[]
  alerts     Alert[]

  @@map("users")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  totalValue  Float    @default(0)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings     PortfolioHolding[]
  transactions Transaction[]

  @@map("portfolios")
}

model PortfolioHolding {
  id           String   @id @default(cuid())
  portfolioId  String
  coinId       String
  symbol       String
  amount       Float
  averagePrice Float
  totalValue   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, coinId])
  @@map("portfolio_holdings")
}

model Transaction {
  id          String          @id @default(cuid())
  portfolioId String
  coinId      String
  symbol      String
  type        TransactionType
  amount      Float
  price       Float
  totalValue  Float
  fee         Float           @default(0)
  notes       String?
  createdAt   DateTime        @default(now())

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  coinIds   String[] // Array de IDs de monedas
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("watchlists")
}

model Alert {
  id          String         @id @default(cuid())
  userId      String
  coinId      String
  symbol      String
  condition   AlertCondition
  targetPrice Float
  isActive    Boolean        @default(true)
  isTriggered Boolean        @default(false)
  triggeredAt DateTime?
  createdAt   DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model MarketData {
  id                       String   @id @default(cuid())
  coinId                   String   @unique
  symbol                   String
  name                     String
  currentPrice             Float
  marketCap                Float?
  volume24h                Float?
  priceChange24h           Float?
  priceChangePercentage24h Float?
  priceChange7d            Float?
  priceChangePercentage7d  Float?
  high24h                  Float?
  low24h                   Float?
  circulatingSupply        Float?
  totalSupply              Float?
  maxSupply                Float?
  lastUpdated              DateTime @default(now())

  @@map("market_data")
}

enum TransactionType {
  BUY
  SELL
}

enum AlertCondition {
  ABOVE
  BELOW
}